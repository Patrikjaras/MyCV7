@page "/"
@using ClassLibrary.Models
@using ClassLibrary1.Models;
@using ClassLibrary1.Data;

<PageTitle>Home</PageTitle>



@*Profile Card*@
<section style="height:auto;" >
    <div class="container col-lg-12 col-sm-4 col-md-8 d-flex justify-content-center align-items-center text-center">
        @foreach (var about in AboutList)
        {

        <div class="card" style="max-width: 400px;">
            <img class="card-img-top" src="@about.ImagePath" alt="Card image">
            <div class="card-body">
                    
               
                    <h4 class="card-title">@about.Name</h4>
                    <p class="card-text">@about.Description</p>
                    <button class="btn btn-primary" type="submit" @onclick="GetJoke">Laugh a little</button>
                    <hr/>
                    <p>@APIJoke.setup</p>
                    <p>@APIJoke.punchline</p>
                
            </div>
        </div>
        }
    </div>
</section>

@*Project section*@
<sectiub>
    <h1>Projects</h1>
    <div class="container mt-1">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Project</th>
                            <th scope="col">Description</th>
                            <th scope="col">GitHub</th>
                           
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var project in ProjectList)
                        {
                            <tr>
                                <td>@project.Name</td>
                                <td>
                                    <div class="dropdown-center">
                                        <button class="btn btn-info dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="max-width: auto; white-space: normal;">
                                            @project.Description
                                        </button>
                                        <ul class="dropdown-menu" style="padding: 5px;">
                                            <p style="min-width:300px; max-width: 400px; margin: 1px;">@project.Text</p>
                                        </ul>
                                    </div>
                                </td>
                                <td>
                                    <a href="@project.GitHubLink" target="_blank" >
                                        <img style="height: 8rem;" src="https://bilderinl3.blob.core.windows.net/images/github.jfif" alt="Image could not be found" />
                                    </a>
                                </td>
                                
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</sectiub>

@* Education section *@
<section class="vh-auto">
    <h1>Education</h1>
    <div class="container mt-2 ">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">School</th>
                            <th scope="col">Description</th>
                            <th scope="col">Start</th>
                            <th scope="col">End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var education in EducationList)
                        {
                            <tr>
                                <td>@education.Name</td>
                                <td>@education.Description</td>
                                <td>@education.StartDate</td>
                                <td>@education.EndDate</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

@* Work experience section *@
<section class="vh-auto">
    <h1>Work experience</h1>
    <div class="container mt-1">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Job</th>
                            <th scope="col">Description</th>
                            <th scope="col">Start</th>
                            <th scope="col">End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var work in workExperienceList)
                        {
                            <tr>
                                <td>@work.Name</td>
                                <td>
                                    <div class="dropdown-center">
                                        <button class="btn btn-info dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="max-width: auto; white-space: normal;">
                                            @work.Description
                                        </button>
                                        <ul class="dropdown-menu" style="padding: 5px;">
                                            <p style="min-width:300px; max-width: 400px; margin: 1px;">@work.Text</p>
                                        </ul>
                                    </div>
                                </td>
                                <td>
                                    @work.StartDate
                                </td>
                                <td>
                                    @work.EndDate
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

@* Qualification section *@
<section class="vh-auto">
    <h1>Qualifications and experiences</h1>
    <div class="container mt-2">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Job</th>
                            <th scope="col">Description</th>
                            <th scope="col">Start</th>
                            <th scope="col">End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var qualification in QualificationsList)
                        {
                            <tr>
                                <td>@qualification.Name</td>
                                <td>
                                    <div class="dropdown-center">
                                        <button class="btn btn-info dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="max-width: auto; white-space: normal;">
                                            @qualification.Description
                                        </button>
                                        <ul class="dropdown-menu" style="padding: 5px;">
                                            <p style="min-width:300px; max-width: 400px; margin: 1px;">@qualification.Text</p>
                                        </ul>
                                    </div>
                                </td>
                                <td>@qualification.StartDate</td>
                                <td>@qualification.EndDate</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>



@* Skill section *@
<section style="" class="border border-1px mt-2">
    <h1>Skills and technologies</h1>
    <div class="container">
        <div class="row align-items-start row-cols-1 row-cols-md-2 row-cols-lg-4 d-flex justify-content-center ">
            @foreach (var skill in SkillsList)
            {
                <div class="col col-6 col-md-6 col-lg-3 mb-6 mt-1" style="">
                    <div class="card" style="border-radius: 10px; height: auto; overflow:hidden; width:auto;">
                        <img src="@skill.imagePath" class="card-img-top" alt="Description of the image" style="max-height: auto; object-fit: cover">
                        <hr />
                        <div class="card-body text-center" style="height: 200px; overflow-x: auto;">        
                            <h3 class="card-title">@skill.Name Years: @skill.Years</h3>      
                            <hr />
                            <p>@skill.Description</p>
                            <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar" style="width: @skill.skillLevel%;"></div>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@*Footer*@
<div class="blockcode">
    <div class="header">Footer</div>

    <footer class="page-footer shadow">
        <div class="d-flex flex-column mx-auto py-5" style="width: 80%">
            <div class="d-flex flex-wrap justify-content-between">
                <div class="align-self-center">
                    <a class="d-flex align-items-center p-0 text-dark">
                        <img alt="logo" src="https://bilderinl3.blob.core.windows.net/images/iths.jfif" style="width:100px; height:100px" class="ml-3" />
                        <span class="ms-3 h5 font-weight-bold"></span>
                    </a>
                    <div class="mt-5 mb-4">
                        <a href="https://www.facebook.com/patrik.jaras/" target="_blank">
                            <img src="https://bilderinl3.blob.core.windows.net/images/facebook.png" alt="text logo" style="width:40px; height:40px;"/>
                        </a>
                        <a href="https://github.com/Patrikjaras?tab=repositories" target="_blank">
                            <img src="https://bilderinl3.blob.core.windows.net/images/github.jfif" alt="text logo" style="width:40px; height:40px;" />
                        </a>
                        <a href="https://www.linkedin.com/in/patrik-ryden-j%C3%A4r%C3%A5s-951b98289/" target="_blank">
                            <img src="https://bilderinl3.blob.core.windows.net/images/linkedIn_PNG23.png" alt="text logo" style="width:40px; height:40px;" />
                        </a>
                    </div>
                </div>
                <div>
                    <p class="h5 mb-4" style="font-weight: 600">Phone</p>
                    <ul class="p-0" style="list-style: none; ">
                        @foreach(var info in ContactInfoList)
                        {
                            <li class="my-2 text-dark">
                                <p class="text-dark">@info.Phone</p>
                            </li>
                        }
                       
                    </ul>
                </div>
                <div>
                    <p class="h5 mb-4" style="font-weight: 600">Email</p>
                    <ul id="emailList" class="p-0" style="list-style: none; cursor: pointer; max-width: 150px; overflow-wrap:">
                      @foreach(var info in ContactInfoList)
                      {
                            <li class="my-2"><p class="text-dark">@info.Email</p></li>
                      }
                      </ul>
                </div>
                <div>
                    <p class="h5 mb-4" style="font-weight: 600">City</p>
                    <ul class="p-0" style="list-style: none;">
                        <li class="my-2">
                            <p class="text-dark">Strandgatan 28,</p>
                        </li>
                        <li class="my-2">
                            <p class="text-dark">Kungälv</p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>
</div>


<AuthorizeView Context="inloggad">

<h1>Add / edit sections</h1>

<div>
    <button @onclick="ToggleProjectsSection" class="btn btn-primary" id="btn-purple" style="margin: 10px">Toggle Edit Projects Section</button>
</div>


@*Öppningstagg för CRUD*@
<div>

@* Project section *@
@if (showProjectSection)
{
    <EditForm Model="newProject" OnValidSubmit="@AddProject" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Add project</h1>
            <label>Project Name</label>
            <InputText @bind-Value="newProject.Name"></InputText>
            <label>Project Description</label>
            <InputText @bind-Value="newProject.Description"></InputText>
            <label>GutHub Link</label>
            <InputText @bind-Value="newProject.GitHubLink"></InputText>
            <label>Text</label>
            <InputText @bind-Value="newProject.Text"></InputText>
        </div>
        <div>
            <button type="submit">Add project</button>
        </div>
       
    </EditForm>
    <EditForm Model="removeProject" OnValidSubmit="@DeleteProject" class="edit-form">
        

        <div>
            <h1>Delete project</h1>
            <select @bind="selectedProjectToRemoveID">
                <option>Select project</option>
                @foreach (var project in ProjectList)
                {
                    <option value="@project.Id">Name: @project.Name Description: @project.Description</option>
                }
            </select>
        </div>
        <div>
            <button type="submit">Delete project</button>
        </div>
        
    </EditForm>
    <EditForm Model="ProjectToEdit" OnValidSubmit="@EditProject" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Edit project</h1>
            <select value="@selectedProjectToEditID" @onchange="UpdateSelectedProjct">
                <option value="">Select project</option>
                @foreach (var project in ProjectList)
                {
                    <option value="@project.Id">Name: @project.Name Description: @project.Description</option>
                }
            </select>
            <label>Name</label>
            <InputText @bind-Value="ProjectToEdit.Name"></InputText>
            <label>Description</label>
            <InputText @bind-Value="ProjectToEdit.Description"></InputText>
            <label>GithubText</label>
            <InputText @bind-Value="ProjectToEdit.GitHubLink"></InputText>
            <label>Text</label>
            <InputText @bind-Value="ProjectToEdit.Text"></InputText>
        </div>
        <div>
            <button type="submit">Edit project</button>
        </div>
       
    </EditForm>

}


@* Work experience *@
<div>
    <button @onclick="ToggleWorkExperienceSection" class="btn btn-primary" id="btn-purple" style="margin: 10px">Toggle Edit work experience Section</button>
</div>

@if (showWorkExperienceSection)
{
    <EditForm Model="newWorkExperience" OnValidSubmit="@AddWorkExperience" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Add Work Experience</h1>
            <label>Work experience Name</label>
            <InputText @bind-Value="newWorkExperience.Name"></InputText>
            <label>Work experience Description</label>
            <InputText @bind-Value="newWorkExperience.Description"></InputText>

            <label>Work experience text</label>
            <InputText @bind-Value="newWorkExperience.Text"></InputText>

            <label>Start Date</label>
            <InputDate @bind-Value="newWorkExperience.StartDate" startvalue="2023-01-01"></InputDate>
            <label>End date</label>
            <InputDate @bind-Value="newWorkExperience.EndDate" startvalue="2023-01-01"></InputDate>
        </div>
        <div>
            <button type="submit">Add Work experience</button>
        </div>
      
    </EditForm>
    <EditForm Model="removeWorkexperience" OnValidSubmit="@DeleteWorkExperience" class="edit-form">
       

        <div>
            <h1>Work experience name</h1>
            <select @bind="selectedWorkExperienceToRemoveID">
                <option>Select work experience</option>
                @foreach (var workExperience in workExperienceList)
                {
                    <option value="@workExperience.Id">Name: @workExperience.Name Description: @workExperience.Description</option>
                }
            </select>
        </div>
        <div>
            <button type="submit">Delete Work Experience</button>
        </div>
        
    </EditForm>
    <EditForm Model="workExperienceToEdit" OnValidSubmit="EditWorkExperience" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Edit WorkExperience</h1>
            <select value="@selectedWorkExperienceToEditID" @onchange="UpdateSelectedWorkExperience">
                <option value="">Select work experience</option>
                @foreach (var workExperience in workExperienceList)
                {
                    <option value="@workExperience.Id">Name: @workExperience.Name Description: @workExperience.Description</option>
                }
            </select>
            <label>Name</label>
            <InputText @bind-Value="workExperienceToEdit.Name"></InputText>
            <label>Description</label>
            <InputText @bind-Value="workExperienceToEdit.Description"></InputText>

            <label>Text</label>
            <InputText @bind-Value="workExperienceToEdit.Text"></InputText>

            <label>Start Date</label>
            <InputDate @bind-Value="workExperienceToEdit.StartDate"></InputDate>
            <label>End date</label>
            <InputDate @bind-Value="workExperienceToEdit.EndDate"></InputDate>
        </div>
        <div>
            <button type="submit">Press to Edit Work experience</button>
        </div>

         
    </EditForm>
}

@* SkillExperience *@
<div>
    <button @onclick="ToggleSkillSection" class="btn btn-primary" id="btn-purple" style="margin: 10px">Toggle Edit Skill Section</button>
</div>


@if (showSkillSection)
{    
    <EditForm Model="newSkill" OnValidSubmit="@AddSkill" class="edit-form">
        <DataAnnotationsValidator />

        <h1>Add Skill</h1>
        <div>
            <label>Skill Name</label>
            <InputText @bind-Value="newSkill.Name"></InputText>
            <label>Skill Description</label>
            <InputText @bind-Value="newSkill.Description"></InputText>
            <label>Skill imagePath</label>
            <InputText @bind-Value=newSkill.imagePath></InputText>
            <label>Skill level</label>
            <InputNumber @bind-Value="newSkill.skillLevel"></InputNumber>
            <label>Years experience</label>
            <InputNumber @bind-Value="newSkill.Years"></InputNumber>

        </div>
        <div>
            <button type="submit">Press to add skill</button>
        </div>
        
    </EditForm>
    <EditForm Model="RemoveSkill" OnValidSubmit="@DeleteSkill" class="edit-form">
        

        <h1>Delete skill</h1>
        <div>
            <label>Skill name</label>
            <select @bind="selectedSkillToRemoveId">
                <option>Select Skill</option>
                @foreach (var skill in SkillsList)
                {
                    <option value="@skill.Id">Name: @skill.Name Description: @skill.Description</option>
                }
            </select>
        </div>
        <div>
            <button type="submit">Press to delete skill</button>
        </div>
       
    </EditForm>
    <EditForm Model="SkillToEdit" OnValidSubmit="@EditSkill" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Edit skill</h1>
            <select value="@selectedSkillToEditId" @onchange="UpdateSelectedSkill">
                <option value="">Select skill</option>
                @foreach (var skill in SkillsList)
                {
                    <option value="@skill.Id">Name: @skill.Name Description: @skill.Description</option>
                }
            </select>
            <label>Name</label>
            <InputText @bind-Value="SkillToEdit.Name"></InputText>
            <label>Description</label>
            <InputText @bind-Value="SkillToEdit.Description"></InputText>
            <label>ImagePath</label>
            <InputText @bind-Value="SkillToEdit.imagePath"></InputText>
            <label>Skill level</label>
            <InputNumber @bind-Value="SkillToEdit.skillLevel"></InputNumber>
            <label>Years experience</label>
            <InputNumber @bind-Value="SkillToEdit.Years"></InputNumber>
        </div>
        <div>
            <button type="submit">Press to edit Skill</button>
        </div>
        
    </EditForm>
}

@* QualificationSection *@
<div>
    <button @onclick="ToggleQualificationSection" class="btn btn-primary" id="btn-purple" style="margin: 10px">Toggle Edit Qualification Section</button>
</div>


@if (showQualificationSection)
{
    <EditForm Model="newQualification" OnValidSubmit="@AddQualification" class="edit-form">
        <DataAnnotationsValidator />

        <h1>Add Qualification</h1>
        <div>
            <label>Qualification Name</label>
            <InputText @bind-Value="newQualification.Name"></InputText>
            <label>Qualification description</label>
            <InputText @bind-Value="newQualification.Description"></InputText>
            <label>Qualification Text</label>
            <InputText @bind-Value="newQualification.Text"></InputText>
            <label>Qualification Start date</label>
            <InputDate @bind-Value="newQualification.StartDate"></InputDate>
            <label>Qualification End date</label>
            <InputDate @bind-Value="newQualification.EndDate"></InputDate>
        </div>
        <div>
            <button type="submit">Add new Qualification</button>
        </div>
        
    </EditForm>
    <EditForm Model="RemoveQualification" OnValidSubmit="@DeleteQualification" class="edit-form" formname="delete">
       

        <h1>Delete Qualification</h1>
        <div>
            <label>Qualification Name</label>
            <select @bind="selectedQualificationToRemoveID">
                <option>Select Qualification</option>
                @foreach (var qualification in QualificationsList)
                {
                    <option value="@qualification.Id">Name: @qualification.Name Description: @qualification.Description</option>
                }
            </select>
        </div>
        <div>
            <button type="submit">Press to delete Qualification</button>
        </div>

      
    </EditForm>
    <EditForm Model="QualificationToEdit" OnValidSubmit="@EditQualification" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Edit Qualification</h1>
            <select value="@selectedQualificationToEditID" @onchange="UpdateSelectedQualification">
                <option value="">Select Qualification</option>
                @foreach (var qualification in QualificationsList)
                {
                    <option value="@qualification.Id">Name: @qualification.Name Description: @qualification.Description</option>
                }
            </select>
            <label>Name</label>
            <InputText @bind-Value="QualificationToEdit.Name"></InputText>
            <label>Description</label>
            <InputText @bind-Value="QualificationToEdit.Description"></InputText>
            <label>Qualification Text</label>
            <InputText @bind-Value="QualificationToEdit.Text"></InputText>
            <label>Qualification Start date</label>
            <InputDate @bind-Value="QualificationToEdit.StartDate"></InputDate>
            <label>Qualification End date</label>
            <InputDate @bind-Value="QualificationToEdit.EndDate"></InputDate>
        </div>
        <div>
            <button type="submit">press to edit Qualification</button>
        </div>
        
    </EditForm>
}

<div>
    <button @onclick="ToggleEditEducationSection" class="btn btn-primary" id="btn-purple" style="margin: 10px">Toggle Edit Education Section</button>
</div>

@if (showEditEducationSection)
{   
    <EditForm Model="newEducation" OnValidSubmit="@AddEducation" class="edit-form" formname="educationinfo">
        <DataAnnotationsValidator />

        <h1>Add new education</h1>
        <div>
            <label for="neweducation.name">Education Name</label>
            <InputText id="neweducation.name" @bind-Value="newEducation.Name"></InputText>
            <label for="neweducation.des">Education description</label>
            <InputText id="neweducation.des" @bind-Value="newEducation.Description"></InputText>
            <label>Start date</label>
            <InputDate @bind-Value="newEducation.StartDate"></InputDate>
            <label>End date</label>
            <InputDate @bind-Value="newEducation.EndDate"></InputDate>
        </div>
        <div>
            <button type="submit">Add new Education</button>
        </div>
        
    </EditForm>
    <EditForm Model="RemoveEducation" OnValidSubmit="@DeleteEducation" class="edit-form">
       

        <h1>Remove Education</h1>
        <div>
            <label>Choose Education to Delete</label>
            <select @bind="SelectedEducationToRemoveID">
                <option>Select Education</option>
                @foreach (var education in EducationList)
                {
                    <option value="@education.Id">Name: @education.Name Descripion: @education.Description</option>
                }
            </select>
        </div>
        <div>
            <button type="submit">Press to delete education</button>
        </div>

    </EditForm>
    <EditForm Model="EducationToEdit" OnValidSubmit="@EditEducationInfo" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Edit Education</h1>
            <select value="@selectedEducationToEditID" @onchange="UpdateSelectedEducation">
                <option value="">Select contact</option>
                @foreach (var contact in EducationList)
                {
                    <option value="@contact.Id">Name: @contact.Name Description: @contact.Description</option>
                }
            </select>
            <label>Name</label>
            <InputText @bind-Value="EducationToEdit.Name">@EducationToEdit.Name</InputText>
            <lavel>Description</lavel>
            <InputText @bind-Value="EducationToEdit.Description"></InputText>
            <label>Start date</label>
            <InputDate @bind-Value="EducationToEdit.StartDate"></InputDate>
            <label>End date</label>
            <InputDate @bind-Value="EducationToEdit.EndDate"></InputDate>
        </div>
        <div>
            <button type="submit">Press to edit Education</button>
        </div>
        
    </EditForm>
}

<div>
    <button @onclick="ToggleEditContactSection" class="btn btn-primary" id="btn-purple" style="margin: 10px">Toggle Edit Contact Section</button>
</div>

@if (showEditContactSection)
{
    <EditForm Model="newContact" OnValidSubmit="@AddNewContact" class="edit-form" formname="contactinfo">
        <DataAnnotationsValidator />


        <h1>Add New Contact Info</h1>
        <div>
            <label for="newcontact.email">Contact Name</label>
            <InputText id="newcontact.email" @bind-Value="newContact.Email"></InputText>
            <label for="newcontact.phone">Contact Phone</label>
            <InputText id="newcontact.phone" @bind-Value="newContact.Phone"></InputText>
        </div>
        <div>
            <button type="submit">Add New ContactInfo</button>
        </div>
        
    </EditForm>
    <EditForm Model="RemoveContact" OnValidSubmit="@DeleteContact" class="edit-form">
        

        <h1>Remove Contact Info</h1>
        <div>
            <label>Choose contact to delete</label>
            <select @bind="selectedContactToRemoveID">
                <option>Select Contact</option>
                @foreach (var contact in ContactInfoList)
                {
                    <option value="@contact.Id">Email: @contact.Email Phone: @contact.Phone</option>
                }
            </select>
        </div>
        <div>
            <button type="submit">Press to delete Contact info.</button>
        </div>
       
    </EditForm>
    <EditForm Model="ContactToEdit" OnValidSubmit="@EditContactFunction" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <h1>Edit ContactInfo</h1>
            <select value="@selectedContactIDToEdit" @onchange="UpdateSelectedContact">
                <option value="">Select ContactInfo</option>
                @foreach (var contact in ContactInfoList)
                {
                    <option value="@contact.Id">Email: @contact.Email Phone: @contact.Phone</option>
                }
            </select>
            <label>Email</label>
            <InputText @bind-Value="ContactToEdit.Email">@ContactToEdit.Email</InputText>
            <label>Phonenumber</label>
            <InputText @bind-Value="ContactToEdit.Phone">@ContactToEdit.Phone</InputText>
        </div>
        <div>
            <button type="submit">Edit contact info</button>
        </div>
        
    </EditForm>
}

<div>
    <button @onclick="ToggleEditAboutSection" class="btn btn-primary" id="btn-purple" style="margin: 10px">Toggle Edit About Section</button>

</div>
@if (showEditAboutSection)
{
    <EditForm Model="AboutInfo" OnValidSubmit="@AddAbout" class="edit-form" FormName="aboutinfo">
        <DataAnnotationsValidator />
        <h1>Add About</h1>
        <div>
            <label for="aboutinfo.name">Name</label>
            <InputText id="aboutinfo.name" @bind-Value="AboutInfo.Name"></InputText>
            <label for="aboutinfo.des">Description</label>
            <InputText id="aboutinfo.des" @bind-Value="AboutInfo.Description"></InputText>
            <Label>ImagePath</Label>
            <InputText @bind-Value="AboutInfo.ImagePath"></InputText>


        </div>
        <div>
            <button type="submit">add about</button>
        </div>
               
    </EditForm>
    <EditForm Model="RemoveAbout" OnValidSubmit="@DeleteAbout" class="edit-form">
       
        <div>
            <label> Choose About</label>
            <select @bind="selectedAboutIdToRemove">
                <option>Select About</option>
                @foreach (var about in AboutList)
                {
                    <option value="@about.Id">@about.Name </option>
                }
            </select>
        </div>
        <div>
            <button type="submit"> About to delete</button>
        </div>

           
    </EditForm>

    <EditForm Model="EditAbout" OnValidSubmit="@EditAboutFunction" class="edit-form">
        <DataAnnotationsValidator />

        <div>
            <label>Update</label>
            <select value="@selectedAboutId" @onchange="UpdateSelectedAbout">
                <option value="">Select About</option>
                @foreach (var about in AboutList)
                {
                    <option value="@about.Id">@about.Name</option>

                }
            </select>

            <label>Name</label>
            <InputText @bind-Value="EditAbout.Name">@EditAbout.Name</InputText>
            <label>Desctiption</label>
            <InputText @bind-Value="EditAbout.Description"></InputText>
            <label>ImagePath</label>
            <InputText @bind-Value="EditAbout.ImagePath"></InputText>
        </div>
        <div>
            <button type="submit">Edit About</button>
        </div>
    </EditForm>
}

@*Stägningstagg för CRUD*@
</div>
</AuthorizeView> 

@code {
    //About
    private About EditAbout { get; set; } = new About();
    private About AboutInfo { get; set; } = new About();
    private About RemoveAbout { get; set; } = new About();
    private List<About> AboutList { get; set; } = new List<About>();
    private string selectedAboutId;
    private string selectedAboutIdToRemove;
    private About selectedAbout { get; set; } = new About();

    //Contact
    private Contact newContact { get; set; } = new Contact();
    private List<Contact> ContactInfoList { get; set; } = new List<Contact>();
    private Contact RemoveContact { get; set; } = new Contact();
    private Contact ContactToEdit { get; set; } = new Contact();
    private string selectedContactToRemoveID;
    private string selectedContactIDToEdit;

    //Education
    private Education newEducation { get; set; } = new Education();
    private List<Education> EducationList { get; set; } = new List<Education>();
    private Education RemoveEducation { get; set; } = new Education();
    private Education EducationToEdit { get; set; } = new Education();
    private string SelectedEducationToRemoveID;
    private string selectedEducationToEditID;

    //Qualification
    private Qualifications newQualification { get; set; } = new Qualifications();
    private List<Qualifications> QualificationsList { get; set; } = new List<Qualifications>();
    private Qualifications RemoveQualification { get; set; } = new Qualifications();
    private Qualifications QualificationToEdit { get; set; } = new Qualifications();
    private string selectedQualificationToRemoveID;
    private string selectedQualificationToEditID;

    //Skills
    private Skills newSkill { get; set; } = new Skills();
    private List<Skills> SkillsList {get; set; } = new List<Skills>();
    private Skills RemoveSkill { get; set; } = new Skills();
    private Skills SkillToEdit { get; set; } = new Skills();
    private string selectedSkillToRemoveId;
    private string selectedSkillToEditId;

    //Workexperience
    private WorkExperience newWorkExperience {get; set; } = new WorkExperience();
    private List<WorkExperience> workExperienceList { get; set; } = new List<WorkExperience>();
    private WorkExperience removeWorkexperience { get; set; } = new WorkExperience();
    private WorkExperience workExperienceToEdit { get; set; } = new WorkExperience();
    private string selectedWorkExperienceToRemoveID;
    private string selectedWorkExperienceToEditID;

    //Projects

    private Projects newProject { get; set; } = new Projects();
    private List<Projects> ProjectList { get; set; } = new List<Projects>();
    private Projects removeProject { get; set; } = new Projects();
    private Projects ProjectToEdit { get; set; } = new Projects();
    private string selectedProjectToRemoveID;
    private string selectedProjectToEditID;

    //JokeAPI
    private JokeAPI APIJoke { get; set; } = new JokeAPI();

    //Helpers
    private HttpClient httpClient = new HttpClient();
    private bool showEditAboutSection = false;
    private bool showEditContactSection = false;
    private bool showEditEducationSection = false;
    private bool showQualificationSection = false;
    private bool showSkillSection = false;
    private bool showWorkExperienceSection = false;
    private bool showProjectSection = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AboutList = await httpClient.GetFromJsonAsync<List<About>>("http://localhost:5177/about");
            ContactInfoList = await httpClient.GetFromJsonAsync<List<Contact>>("http://localhost:5177/contact");
            EducationList = await httpClient.GetFromJsonAsync<List<Education>>("http://localhost:5177/education");
            QualificationsList = await httpClient.GetFromJsonAsync<List<Qualifications>>("http://localhost:5177/qualifications");
            SkillsList = await httpClient.GetFromJsonAsync<List<Skills>>("http://localhost:5177/skills");
            workExperienceList = await httpClient.GetFromJsonAsync<List<WorkExperience>>("http://localhost:5177/workexperience");
            APIJoke = await httpClient.GetFromJsonAsync<JokeAPI>("https://official-joke-api.appspot.com/random_joke");
            ProjectList = await httpClient.GetFromJsonAsync<List<Projects>>("http://localhost:5177/project");
            // await GetAboutInfo();
            // await GetContactInfo();
            // await GetEducationInfo();
            // await GetQualifcationsList();
            // await GetSkillList();
            // await GetWorkExperienceList();
        }
        catch(Exception)
        {
            Console.WriteLine("Something went wrong");
        }

    }
    //Show different CRUD sections
    private void ToggleEditContactSection()
    {
        showEditContactSection = !showEditContactSection;
    }
    private void ToggleEditAboutSection()
    {
        showEditAboutSection = !showEditAboutSection;
    }
    private void ToggleEditEducationSection()
    {
        showEditEducationSection = !showEditEducationSection;
    }
    private void ToggleQualificationSection()
    {
        showQualificationSection = !showQualificationSection;
    }
    private void ToggleSkillSection()
    {
        showSkillSection = !showSkillSection;
    }
    private void ToggleWorkExperienceSection()
    {
        showWorkExperienceSection = !showWorkExperienceSection;
    }
    private void ToggleProjectsSection()
    {
        showProjectSection = !showProjectSection;
    }

    //GetApiResponse
    private async Task GetJoke()
    {
        try
        {
            // APIJoke = await httpClient.GetFromJsonAsync<JokeAPI>("https://official-joke-api.appspot.com/random_joke");

            var response = await httpClient.GetAsync("https://official-joke-api.appspot.com/random_joke");
            if (response.IsSuccessStatusCode)
            {
                APIJoke = await response.Content.ReadFromJsonAsync<JokeAPI>();
                StateHasChanged();
            }

        }
        catch (Exception)
        {

        }
    }

    //WorkExperience
    private async Task GetWorkExperienceList()
    {
        try
        {
            var response = await httpClient.GetAsync("http://localhost:5177/workexperience");
            if (response.IsSuccessStatusCode)
            {
                workExperienceList = await response.Content.ReadFromJsonAsync<List<WorkExperience>>();
                StateHasChanged();
            }
        }
        catch(Exception)
        {

        }
    }
    private async Task AddWorkExperience()
    {
        try
        {
            if (newWorkExperience != null)
            {
                var response = await httpClient.PostAsJsonAsync($"http://localhost:5177/workexperience", newWorkExperience);
                if(response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Sucess");
                    newWorkExperience = new WorkExperience();
                    await GetWorkExperienceList();
                }
            }          
        }
        catch (Exception)
        {

        }
    }
    private async Task DeleteWorkExperience()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedWorkExperienceToRemoveID)) 
            {
                Console.WriteLine("no expereience selected");
                return;
            }

            var response = await httpClient.DeleteAsync($"http://localhost:5177/workexperience/{selectedWorkExperienceToRemoveID}");
            if (response.IsSuccessStatusCode)
            {
                selectedWorkExperienceToRemoveID ="";
                await GetWorkExperienceList();
            }

        }
        catch (Exception)
        {

        }
    }
    private async Task EditWorkExperience()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5177/workexperience/{selectedWorkExperienceToEditID}", workExperienceToEdit);
            if(response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                workExperienceToEdit = new WorkExperience();
                await GetWorkExperienceList();

            }
        }
        catch (Exception)
        {

        }
    }
    private void UpdateSelectedWorkExperience(ChangeEventArgs e)
    {
        try
        {
            selectedWorkExperienceToEditID = e.Value.ToString();
            workExperienceToEdit = workExperienceList.FirstOrDefault(x => x.Id == selectedWorkExperienceToEditID);
            if(string.IsNullOrEmpty(selectedWorkExperienceToEditID))
            {
                var selectedWorkExperience = workExperienceList.FirstOrDefault(x => x.Id == selectedWorkExperienceToEditID);
                if(selectedWorkExperience != null)
                {
                    workExperienceToEdit = new WorkExperience
                    {
                        Name = selectedWorkExperience.Name,
                        Description = selectedWorkExperience.Description
                    };
                }
            }
        }
        catch (Exception)
        {

        }
    }
    //Skill Functions
    private async Task GetSkillList()
    {
        try
        {
            var response = await httpClient.GetAsync("http://localhost:5177/skills");
            if(response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                SkillsList = await response.Content.ReadFromJsonAsync<List<Skills>>();
                StateHasChanged();
            }
        }
        catch(Exception)
        {

        }
    }
    private async Task AddSkill()
    {
        try
        {
            if (newSkill != null)
            {

                var response = await httpClient.PostAsJsonAsync($"http://localhost:5177/skills", newSkill);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Sucess");
                    newSkill = new Skills();
                    await GetSkillList();
                }
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task DeleteSkill()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedSkillToRemoveId))
            {
                Console.WriteLine("no skill selected");
                return;
            }
            var response = await httpClient.DeleteAsync($"http://localhost:5177/skills/{selectedSkillToRemoveId}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                selectedSkillToRemoveId = "";
                await GetSkillList();
            }
        }
        catch(Exception)
        {

        }
    }
    private async Task EditSkill()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5177/skills/{selectedSkillToEditId}", SkillToEdit);
            if(response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                SkillToEdit = new Skills();
                await GetSkillList();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task UpdateSelectedSkill(ChangeEventArgs e)
    {
        try
        {
            selectedSkillToEditId = e.Value.ToString();
            SkillToEdit = SkillsList.FirstOrDefault(x => x.Id == selectedSkillToEditId);
            if (string.IsNullOrEmpty(selectedSkillToEditId))
            {
                var selectedSkill = SkillsList.FirstOrDefault(x => x.Id == selectedSkillToEditId);
                if (selectedSkill != null)
                {
                    SkillToEdit = new Skills
                    {
                        Name = selectedSkill.Name,
                        Description = selectedSkill.Description
                    };
                }
            }
        }
        catch(Exception)
        {

        }
    }

    //Qualification funtions
    private async Task GetQualifcationsList()
    {
        try
        {
            var response = await httpClient.GetAsync("http://localhost:5177/qualifications");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                QualificationsList = await response.Content.ReadFromJsonAsync<List<Qualifications>>();
                StateHasChanged();
            }
        }
        catch
        {

        }
    }
    private async Task AddQualification()
    {
        try
        {
            if (newQualification != null)
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:5177/qualifications", newQualification);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("sucess");
                    newQualification = new Qualifications();
                    await GetQualifcationsList();
                }
            }
        }
        catch
        {

        }
    }
    private async Task DeleteQualification()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedQualificationToRemoveID))
            {
                Console.WriteLine("No contact slected");
                return;
            }
            var response = await httpClient.DeleteAsync($"http://localhost:5177/qualifications/{selectedQualificationToRemoveID}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Sucess, education with ID: {selectedContactToRemoveID} has been removed");
                SelectedEducationToRemoveID = "";
                await GetQualifcationsList();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task EditQualification()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5177/qualifications/{QualificationToEdit.Id}", QualificationToEdit);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                QualificationToEdit = new Qualifications();
                await GetQualifcationsList();
            }
        }
        catch
        {

        }
    }
    private async Task UpdateSelectedQualification(ChangeEventArgs e)
    {
        try
        {           
            selectedQualificationToEditID = e.Value.ToString();
            QualificationToEdit = QualificationsList.FirstOrDefault(x => x.Id == selectedQualificationToEditID);

            if (string.IsNullOrEmpty(selectedQualificationToEditID))
            {
                var slectedQualification = QualificationsList.FirstOrDefault(x => x.Id == selectedQualificationToEditID);
                if (slectedQualification != null)
                {
                    QualificationToEdit = new Qualifications
                            {
                                Name = slectedQualification.Name,
                                Description = slectedQualification.Description
                            };
                }
            }           
        }
        catch (Exception)
        {

        }
    }

    //Education functions
    private async Task GetEducationInfo()
    {
        try
        {
            var response = await httpClient.GetAsync("http://localhost:5177/education");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                EducationList = await response.Content.ReadFromJsonAsync<List<Education>>();
                StateHasChanged();
            }

        }
        catch (Exception)
        {

        }
    }
    private async Task AddEducation()
    {
        try
        {
            if (newEducation != null)
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:5177/education", newEducation);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("sucess");
                    newEducation = new Education();
                    await GetEducationInfo();
                }
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task DeleteEducation()
    {
        try
        {
            if (string.IsNullOrEmpty(SelectedEducationToRemoveID))
            {
                Console.WriteLine("No contact selected");
                return;
            }
            var response = await httpClient.DeleteAsync($"http://localhost:5177/education/{SelectedEducationToRemoveID}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"sucess, education with ID: {SelectedEducationToRemoveID} has been removed");
                SelectedEducationToRemoveID = "";
                await GetEducationInfo();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task EditEducationInfo()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5177/education/{EducationToEdit.Id}", EducationToEdit);
            if (response.IsSuccessStatusCode) 
            {
                Console.WriteLine("Sucess");
                EducationToEdit = new Education();
                await GetEducationInfo();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task UpdateSelectedEducation(ChangeEventArgs e)
    {
        selectedEducationToEditID = e.Value.ToString();
        EducationToEdit = EducationList.FirstOrDefault(x => x.Id == selectedEducationToEditID);

        try
        {
            if (string.IsNullOrEmpty(selectedEducationToEditID))
            {
                var selectedEducation = EducationList.FirstOrDefault(x => x.Id == selectedEducationToEditID);
                if (selectedEducation != null)
                {
                    EducationToEdit = new Education
                    {
                        Name = selectedEducation.Name,
                        Description = selectedEducation.Description
                    };

                }
            }


        }
        catch (Exception)
        {

        }
    }

    //Contact functions
    private async Task GetContactInfo()
    {
        try
        {
            var response = await httpClient.GetAsync("http://localhost:5177/contact");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Success");
                ContactInfoList = await response.Content.ReadFromJsonAsync<List<Contact>>();

                StateHasChanged();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task AddNewContact()
    {
        try
        {
            if (newContact != null)
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:5177/contact", newContact);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Sucess");
                    newContact = new Contact();
                    await GetContactInfo();
                }
            }
        }
        catch (Exception)
        {
            Console.WriteLine("Something went wrong");
        }
    }
    private async Task DeleteContact()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedContactToRemoveID))
            {
                Console.WriteLine("no contact selected");
                return;
            }
            var response = await httpClient.DeleteAsync($"http://localhost:5177/contact/{selectedContactToRemoveID}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Success item with ID: {selectedContactToRemoveID}");
                selectedContactToRemoveID = "";
                await GetContactInfo();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task EditContactFunction()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5177/contact/{ContactToEdit.Id}", ContactToEdit);
            if (response.IsSuccessStatusCode) 
            {
                Console.WriteLine("Sucess");
                ContactToEdit = new Contact();
                await GetContactInfo();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task UpdateSelectedContact(ChangeEventArgs e)
    {
        selectedContactIDToEdit = e.Value.ToString();
        ContactToEdit = ContactInfoList.FirstOrDefault(x => x.Id == selectedContactIDToEdit);

        if (string.IsNullOrEmpty(selectedContactIDToEdit))
        {
            var slectedContact = ContactInfoList.FirstOrDefault(x => x.Id == selectedContactIDToEdit);
            if (slectedContact != null)
            {
                ContactToEdit = new Contact
                {
                    Email = slectedContact.Email,
                    Phone = slectedContact.Phone

                };

            }

        }


    }

    //About functions
    private void OnAboutSelected(ChangeEventArgs x)
    {
        selectedAboutId = x.Value.ToString();
        EditAbout = AboutList.FirstOrDefault(x => x.Id == selectedAboutId);

    }
    private async Task GetAboutInfo()
    {
        try
        {
            var response = await httpClient.GetAsync("http://localhost:5177/about");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("sucess");
                AboutList = await response.Content.ReadFromJsonAsync<List<About>>();
                StateHasChanged();
            }
            else
            {

            }
        }
        catch(Exception)
        {

        }
    }
    private async Task AddAbout()
    {
        try
        {

            if (AboutInfo.Name != null)
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:5177/about", AboutInfo);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Success");
                    AboutInfo = new About();
                    await GetAboutInfo();
                }
                else
                {
                    Console.WriteLine("Failed");
                }
            }
            else
            {

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Something went wrong");

        }
    }
    private async Task DeleteAbout()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedAboutIdToRemove))
            {
                Console.WriteLine("No about selected");
                return;
            }
            var response = await httpClient.DeleteAsync($"http://localhost:5177/about/{selectedAboutIdToRemove}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Sucess item with ID:{selectedAboutId} was deleted");
                selectedAboutId = "";
                await GetAboutInfo();

                return;
            }
            else
            {
                Console.WriteLine("failed");
                return;
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task EditAboutFunction()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5177/about/{EditAbout.Id}", EditAbout);


            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                EditAbout = new About();
                await GetAboutInfo();


            }
            else
            {
                Console.WriteLine("Something went wrong");
            }


        }
        catch (Exception)
        {

        }
    }
    private async Task UpdateSelectedAbout(ChangeEventArgs e)
    {

        selectedAboutId = e.Value.ToString();
        EditAbout = AboutList.FirstOrDefault(x => x.Id == selectedAboutId);

        if (string.IsNullOrEmpty(selectedAboutId))
        {
            var selectedAbout = AboutList.FirstOrDefault(x => x.Id == selectedAboutId);
            if (selectedAbout != null)
            {
                EditAbout = new About
                {
                    Name = selectedAbout.Name,
                    Description = selectedAbout.Description

                };
            }


        }

    }

    //Project functions
    private async Task GetProjectsInfo()
    {
        {
            try
            {
                var response = await httpClient.GetAsync("http://localhost:5177/project");
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("sucess");
                    ProjectList = await response.Content.ReadFromJsonAsync<List<Projects>>();
                    StateHasChanged();
                }
                else
                {

                }
            }
            catch (Exception)
            {

            }
        }
    }
    private async Task AddProject()
    {       
        try
        {
            if (newProject.Name != null)
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:5177/project", newProject);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Success");
                    newProject = new Projects();
                    await GetProjectsInfo();
                }
                else
                {
                    Console.WriteLine("Failed");
                }
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Something went wrong");
        }
    }
    private async Task DeleteProject()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedProjectToRemoveID))
            {
                Console.WriteLine("No about selected");
                return;
            }
            var response = await httpClient.DeleteAsync($"http://localhost:5177/project/{selectedProjectToRemoveID}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Sucess item with ID:{selectedProjectToRemoveID} was deleted");
                selectedProjectToRemoveID = "";
                ProjectToEdit = new Projects();
                selectedProjectToEditID = "";
                await GetProjectsInfo();

                return;
            }
            else
            {
                Console.WriteLine("failed");
                return;
            }
        }
        catch (Exception)
        {

        }

    }
    private async Task EditProject()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5177/project/{ProjectToEdit.Id}", ProjectToEdit);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucess");
                ProjectToEdit = new Projects();
                selectedProjectToEditID = "";
                await GetProjectsInfo();
            }
        }
        catch (Exception)
        {

        }
    }
    private async Task UpdateSelectedProjct(ChangeEventArgs e)
    {
        selectedProjectToEditID = e.Value.ToString();
        ProjectToEdit = ProjectList.FirstOrDefault(x => x.Id == selectedProjectToEditID);

        if (string.IsNullOrEmpty(selectedProjectToEditID))
        {
            var selectedProject = ProjectList.FirstOrDefault(x => x.Id == selectedProjectToEditID);
            if (selectedProject != null)
            {
                ProjectToEdit = new Projects
                    {
                        Name = selectedProject.Name,
                        Description = selectedProject.Description,
                        GitHubLink = selectedProject.GitHubLink
                        
                    };

            }

        }
    }

}
            